<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebUI</name>
    </assembly>
    <members>
        <member name="T:WebUI.Controllers.AuthorController">
            <summary>
            AuthorController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            AuthorController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.GetAllAuthorAsync(Application.Common.Pagging.Entities.AuthorParameter)">
            <summary>
            Get list of Authors
            </summary>
            <returns>Returns list of Authors</returns>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.GetAuthorByIdAsync(System.Guid)">
            <summary>
            Get Author by id
            </summary>
            <param name="id">Author id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.CreateAuthorAsync(Application.Features.AuthorFeatures.Commands.CreateAuthor.CreateAuthorCommand)">
            <summary>
            Craete new Author
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.UpdateAuthorAsync(Application.Features.AuthorFeatures.Commands.UpdateAuthor.UpdateAuthorCommand)">
            <summary>
            Update Author by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.DeleteAuthorAsync(System.Guid)">
            <summary>
            Delete Author by id
            </summary>
            <param name="id">Author Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.GetAllAuthors_DataShapingAsync(Application.Common.Pagging.Entities.AuthorParameter)">
            <summary>
            Get list of Authors with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of Authors with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.AuthorController.GetAuthorById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.AuthorParameter)">
            <summary>
            Get Author by id with selected fields
            </summary>
            <param name="id">Author id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="T:WebUI.Controllers.BaseController">
            <summary>
            A base controller class for an MVC controller without view support. With IMediator, ILogger, IUrlHelper
            </summary>
        </member>
        <member name="P:WebUI.Controllers.BaseController.Mediator">
            <summary>
            Defines a mediator to encapsulate request/response and publishing interaction patterns
            </summary>
        </member>
        <member name="F:WebUI.Controllers.BaseController._logger">
            <summary>
            Represents a type used to perform logging.
            </summary>
        </member>
        <member name="F:WebUI.Controllers.BaseController._urlHelper">
            <summary>
            Defines the contract for the helper to build URLs for ASP.NET MVC within an application
            </summary>
        </member>
        <member name="F:WebUI.Controllers.BaseController._tableName">
            <summary>
            A property containing the name of the table with which the used controller interacts
            </summary>
        </member>
        <member name="M:WebUI.Controllers.BaseController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            Base constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.BaseController.CreateLinksForEntity``1(``0,System.Guid,System.String,System.String,System.String)">
            <summary>
            Create links for implementation HATEOAS in entity
            </summary>
            <param name="entity">Essential entity(DTO)</param>
            <param name="entityId">Entity Id</param>
            <param name="selfLinkName">Self link name</param>
            <param name="updateLinkName">Update link name</param>
            <param name="deleteLinkName">Delete link name</param>
            <typeparam name="TEntity">Type essential entity(DTO)</typeparam>
            <returns>Returns entity with generated links</returns>
        </member>
        <member name="T:WebUI.Controllers.BookAuthorController">
            <summary>
            BookAuthorsAuthorController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            BookAuthorController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.GetAllBookAuthorsAsync(Application.Common.Pagging.Entities.BookAuthorParameter)">
            <summary>
            Get list of BookAuthors
            </summary>
            <returns>Returns list of BookAuthorsAuthors</returns>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.GetBookAuthorsByIdAsync(System.Guid,System.Guid)">
            <summary>
            Get BookAuthor by ids
            </summary>
            <param name="bookId">Book Id</param>
            <param name="AuthorId">Author Id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.CreateBookAuthorsAsync(Application.Features.BookAuthorFeatures.Commands.CreateBookAuthor.CreateBookAuthorCommand)">
            <summary>
            Craete new BookAuthor
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns ids created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.UpdateBookAuthorsAsync(Application.Features.BookAuthorFeatures.Commands.UpdateBookAuthor.UpdateBookAuthorCommand)">
            <summary>
            Update BookAuthor by ids
            </summary>
            <param name="command">Update command</param>
            <returns>Returns ids updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.DeleteBookAuthorsAsync(System.Guid,System.Guid)">
            <summary>
            Delete BookAuthor by ids
            </summary>
            <param name="bookId">Book Id</param>
            <param name="AuthorId">Author Id</param>
            <returns>Return deleted entity ids</returns>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.GetAllBookAuthors_DataShapingAsync(Application.Common.Pagging.Entities.BookAuthorParameter)">
            <summary>
            Get list of BookAuthors with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of BookAuthors with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.BookAuthorController.GetBookAuthorByIds_DataShapingAsync(System.Guid,System.Guid,Application.Common.Pagging.Entities.BookAuthorParameter)">
            <summary>
            Get BookAuthor by ids with selected fields
            </summary>
            <param name="bookId">Book Id</param>
            <param name="AuthorId">Author Id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="T:WebUI.Controllers.BookController">
            <summary>
            BookController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.BookController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            BookController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.BookController.GetAllBookAsync(Application.Common.Pagging.Entities.BookParameter)">
            <summary>
            Get list of Books
            </summary>
            <returns>Returns list of Books</returns>
        </member>
        <member name="M:WebUI.Controllers.BookController.GetBookByIdAsync(System.Guid)">
            <summary>
            Get Book by id
            </summary>
            <param name="id">Book id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.BookController.CreateBookAsync(Application.Features.BookFeatures.Commands.CreateBook.CreateBookCommand)">
            <summary>
            Craete new Book
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookController.UpdateBookAsync(Application.Features.BookFeatures.Commands.UpdateBook.UpdateBookCommand)">
            <summary>
            Update Book by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookController.DeleteBookAsync(System.Guid)">
            <summary>
            Delete Book by id
            </summary>
            <param name="id">Book Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.BookController.GetAllBook_DataShapingAsync(Application.Common.Pagging.Entities.BookParameter)">
            <summary>
            Get list of Book with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of Book with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.BookController.GetBookById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.BookParameter)">
            <summary>
            Get Book by id with selected fields
            </summary>
            <param name="id">Book id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.BookController.GetAverageRatingForEachBook_Async(Application.Common.Pagging.Entities.BookParameter)">
            <summary>
            Gets the list of all Books with average rating
            </summary>
            <returns>Returns list of GetDTO_AvgRatingBook</returns>
        </member>
        <member name="T:WebUI.Controllers.BookDetailsController">
            <summary>
            BookDetailsController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            BookDetailsController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.GetAllBookDetailsAsync(Application.Common.Pagging.Entities.BookDetailsParameter)">
            <summary>
            Get list of BookDetails
            </summary>
            <returns>Returns list of BookDetails</returns>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.GetBookDetailsByIdAsync(System.Guid)">
            <summary>
            Get BookDetails by id
            </summary>
            <param name="id">BookDetails id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.CreateBookDetailsAsync(Application.Features.BookDetailsFeatures.Commands.CreateBookDetails.CreateBookDetailsCommand)">
            <summary>
            Craete new BookDetails
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.UpdateBookDetailsAsync(Application.Features.BookDetailsFeatures.Commands.UpdateBookDetails.UpdateBookDetailsCommand)">
            <summary>
            Update BookDetails by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.DeleteBookDetailsAsync(System.Guid)">
            <summary>
            Delete BookDetails by id
            </summary>
            <param name="id">BookDetails Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.GetAllBookDetails_DataShapingAsync(Application.Common.Pagging.Entities.BookDetailsParameter)">
            <summary>
            Get list of BookDetails with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of BookDetails with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.BookDetailsController.GetBookDetailsById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.BookDetailsParameter)">
            <summary>
            Get BookDetails by id with selected fields
            </summary>
            <param name="id">BookDetails id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="T:WebUI.Controllers.BookGenreController">
            <summary>
            BookGenresGenreController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            BookGenreController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.GetAllBookGenresAsync(Application.Common.Pagging.Entities.BookGenreParameter)">
            <summary>
            Get list of BookGenres
            </summary>
            <returns>Returns list of BookGenresGenres</returns>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.GetBookGenresByIdAsync(System.Guid,System.Guid)">
            <summary>
            Get BookGenre by ids
            </summary>
            <param name="bookId">Book Id</param>
            <param name="genreId">Genre Id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.CreateBookGenresAsync(Application.Features.BookGenreFeatures.Commands.CreateBookGenre.CreateBookGenreCommand)">
            <summary>
            Craete new BookGenre
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns ids created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.UpdateBookGenresAsync(Application.Features.BookGenreFeatures.Commands.UpdateBookGenre.UpdateBookGenreCommand)">
            <summary>
            Update BookGenre by ids
            </summary>
            <param name="command">Update command</param>
            <returns>Returns ids updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.DeleteBookGenresAsync(System.Guid,System.Guid)">
            <summary>
            Delete BookGenre by ids
            </summary>
            <param name="bookId">Book Id</param>
            <param name="genreId">Genre Id</param>
            <returns>Return deleted entity ids</returns>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.GetAllBookGenres_DataShapingAsync(Application.Common.Pagging.Entities.BookGenreParameter)">
            <summary>
            Get list of BookGenres with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of BookGenres with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.BookGenreController.GetBookGenreByIds_DataShapingAsync(System.Guid,System.Guid,Application.Common.Pagging.Entities.BookGenreParameter)">
            <summary>
            Get BookGenre by ids with selected fields
            </summary>
            <param name="bookId">Book Id</param>
            <param name="GenreId">Genre Id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="T:WebUI.Controllers.GenreController">
            <summary>
            GenreController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.GenreController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            GenreController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.GenreController.GetAllGenreAsync(Application.Common.Pagging.Entities.GenreParameter)">
            <summary>
            Get list of Genres
            </summary>
            <returns>Returns list of Genres</returns>
        </member>
        <member name="M:WebUI.Controllers.GenreController.GetGenreByIdAsync(System.Guid)">
            <summary>
            Get Genre by id
            </summary>
            <param name="id">Genre id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.GenreController.CreateGenreAsync(Application.Features.GenreFeatures.Commands.CreateGenre.CreateGenreCommand)">
            <summary>
            Craete new Genre
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.GenreController.UpdateGenreAsync(Application.Features.GenreFeatures.Commands.UpdateGenre.UpdateGenreCommand)">
            <summary>
            Update Genre by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.GenreController.DeleteGenreAsync(System.Guid)">
            <summary>
            Delete Genre by id
            </summary>
            <param name="id">Genre Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.GenreController.GetAllGenre_DataShapingAsync(Application.Common.Pagging.Entities.GenreParameter)">
            <summary>
            Get list of Genre with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of Genre with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.GenreController.GetGenreById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.GenreParameter)">
            <summary>
            Get Genre by id with selected fields
            </summary>
            <param name="id">Genre id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.GenreController.GetCountOfBooksEachGenre_Async(Application.Common.Pagging.Entities.GenreParameter)">
            <summary>
            Gets count the number of books of each genre
            </summary>
            <returns>Returns list of GetDTO_CountOfBooksEachGenre</returns>
        </member>
        <member name="T:WebUI.Controllers.LoanController">
            <summary>
            LoanController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.LoanController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            LoanController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.LoanController.GetAllLoanAsync(Application.Common.Pagging.Entities.LoanParameter)">
            <summary>
            Get list of Loans
            </summary>
            <returns>Returns list of Loans</returns>
        </member>
        <member name="M:WebUI.Controllers.LoanController.GetLoanByIdAsync(System.Guid)">
            <summary>
            Get Loan by id
            </summary>
            <param name="id">Loan id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.LoanController.CreateLoanAsync(Application.Features.LoanFeatures.Commands.CreateLoan.CreateLoanCommand)">
            <summary>
            Craete new Loan
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.LoanController.UpdateLoanAsync(Application.Features.LoanFeatures.Commands.UpdateLoan.UpdateLoanCommand)">
            <summary>
            Update Loan by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.LoanController.DeleteLoanAsync(System.Guid)">
            <summary>
            Delete Loan by id
            </summary>
            <param name="id">Loan Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.LoanController.GetAllLoan_DataShapingAsync(Application.Common.Pagging.Entities.LoanParameter)">
            <summary>
            Get list of Loan with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of Loan with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.LoanController.GetLoanById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.LoanParameter)">
            <summary>
            Get Loan by id with selected fields
            </summary>
            <param name="id">Loan id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="T:WebUI.Controllers.PublisherController">
            <summary>
            PublisherController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            PublisherController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.GetAllPublisherAsync(Application.Common.Pagging.Entities.PublisherParameter)">
            <summary>
            Get list of Publishers
            </summary>
            <returns>Returns list of Publishers</returns>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.GetPublisherByIdAsync(System.Guid)">
            <summary>
            Get Publisher by id
            </summary>
            <param name="id">Publisher id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.CreatePublisherAsync(Application.Features.PublisherFeatures.Commands.CreatePublisher.CreatePublisherCommand)">
            <summary>
            Craete new Publisher
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.UpdatePublisherAsync(Application.Features.PublisherFeatures.Commands.UpdatePublisher.UpdatePublisherCommand)">
            <summary>
            Update Publisher by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.DeletePublisherAsync(System.Guid)">
            <summary>
            Delete Publisher by id
            </summary>
            <param name="id">Publisher Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.GetAllPublisher_DataShapingAsync(Application.Common.Pagging.Entities.PublisherParameter)">
            <summary>
            Get list of Publisher with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of Publisher with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.PublisherController.GetPublisherById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.PublisherParameter)">
            <summary>
            Get Publisher by id with selected fields
            </summary>
            <param name="id">Publisher id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="T:WebUI.Controllers.ReviewController">
            <summary>
            ReviewController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            ReviewController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.GetAllReviewAsync(Application.Common.Pagging.Entities.ReviewParameter)">
            <summary>
            Get list of Reviews
            </summary>
            <returns>Returns list of Reviews</returns>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.GetReviewByIdAsync(System.Guid)">
            <summary>
            Get Review by id
            </summary>
            <param name="id">Review id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.CreateReviewAsync(Application.Features.ReviewFeatures.Commands.CreateReview.CreateReviewCommand)">
            <summary>
            Craete new Review
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.UpdateReviewAsync(Application.Features.ReviewFeatures.Commands.UpdateReview.UpdateReviewCommand)">
            <summary>
            Update Review by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.DeleteReviewAsync(System.Guid)">
            <summary>
            Delete Review by id
            </summary>
            <param name="id">Review Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.GetAllReview_DataShapingAsync(Application.Common.Pagging.Entities.ReviewParameter)">
            <summary>
            Get list of Review with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of Review with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.ReviewController.GetReviewById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.ReviewParameter)">
            <summary>
            Get Review by id with selected fields
            </summary>
            <param name="id">Review id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="T:WebUI.Controllers.UserController">
            <summary>
            UserController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.UserController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            UserController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.UserController.GetAllUserAsync(Application.Common.Pagging.Entities.UserParameter)">
            <summary>
            Get list of Users
            </summary>
            <returns>Returns list of Users</returns>
        </member>
        <member name="M:WebUI.Controllers.UserController.GetUserByIdAsync(System.Guid)">
            <summary>
            Get User by id
            </summary>
            <param name="id">User id</param>
            <returns>Returns entity by id</returns>
        </member>
        <member name="M:WebUI.Controllers.UserController.CreateUserAsync(Application.Features.UserFeatures.Commands.CreateUser.CreateUserCommand)">
            <summary>
            Craete new User
            </summary>
            <param name="command">Cteate command</param>
            <returns>Returns id created entity</returns>
        </member>
        <member name="M:WebUI.Controllers.UserController.UpdateUserAsync(Application.Features.UserFeatures.Commands.UpdateUser.UpdateUserCommand)">
            <summary>
            Update User by id
            </summary>
            <param name="command">Update command</param>
            <returns>Returns id updated entity</returns>
        </member>
        <member name="M:WebUI.Controllers.UserController.DeleteUserAsync(System.Guid)">
            <summary>
            Delete User by id
            </summary>
            <param name="id">User Id</param>
            <returns>Return deleted entity id</returns>
        </member>
        <member name="M:WebUI.Controllers.UserController.GetAllUser_DataShapingAsync(Application.Common.Pagging.Entities.UserParameter)">
            <summary>
            Get list of User with selected fields
            </summary>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns list of User with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.UserController.GetUserById_DataShapingAsync(System.Guid,Application.Common.Pagging.Entities.UserParameter)">
            <summary>
            Get User by id with selected fields
            </summary>
            <param name="id">User id</param>
            <param name="parameters">Fields, that need select</param>
            <returns>Returns entity by id with selected fields</returns>
        </member>
        <member name="M:WebUI.Controllers.UserController.GetNumBooksIssuedToUserAsync(Application.Common.Pagging.Entities.UserParameter)">
            <summary>
            Gets number of books issued per user
            </summary>
            <returns>Returns list of GetDTO_NumBooksIssuedToUser</returns>
        </member>
        <member name="T:WebUI.Controllers.UserIdentityController">
            <summary>
            UserIdentityController
            </summary>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Mvc.IUrlHelper)">
            <summary>
            UserIdentityController constructor for initialisation ILogger and IUrlHelper
            </summary>
            <param name="loggerFactory">ILoggerFactory</param>
            <param name="urlHelper">IUrlHelper</param>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.GetUsersIdentityAsync">
            <summary>
            Get list of UsersIdentity
            </summary>
            <returns>Returns list of UsersIdentity</returns>
            <response code="200">All database data retrieved successfully</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="401">If the user is not authorized</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.GetUserIdentityByIdAsync(System.Guid)">
            <summary>
            Get UserIdentity by id
            </summary>
            <param name="id">UserIdentity id</param>
            <returns>Returns entity by id</returns>
            <response code="200">All database data retrieved successfully</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="401">If the user is not authorized</response>
            <response code="404">If the user is not found in the database</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.GetTokensByIdAsync(System.Guid)">
            <summary>
            Get tokens by user id
            </summary>
            <param name="id">User id</param>
            <returns>Returns tokens by user id</returns>
            <response code="200">All database data retrieved successfully</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="401">If the user is not authorized</response>
            <response code="404">If the user is not found in the database</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.RegisterUserAsync(Application.Features.UserIdentityFeatures.Commands.RegisterUserIdentity.RegisterUserIdentityCommand)">
            <summary>
            Register user with role "USER"
            </summary>
            <param name="command">Register models</param>
            <returns>Returns id registered user</returns>
            <response code="200">All data has been successfully entered into the database</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="401">If the user is not authorized</response>
            <response code="422">If the input data is invalid</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.GetSecuredData_User">
            <summary>Get secured data to user</summary>
            <returns>Returns secured data to user</returns>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.GetSecuredData_Administrator">
            <summary>Get secured data to administrator</summary>
            <returns>Returns secured data to administrator</returns>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.AddRoleAsync(Application.Features.UserIdentityFeatures.Queries.AddRole.AddRoleQuery)">
            <summary>
            Adds role to user
            </summary>
            <param name="query">AddRole models</param>
            <returns>Returns id user was successfully assigned role</returns>
            <response code="200">All data has been successfully entered into the database</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="401">If the user is not authorized</response>
            <response code="422">If it was not possible to add a role to a user</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.RevokeRefreshTokenAsync(System.String)">
            <summary>
            Revokes refresh token
            </summary>
            <param name="token">Refresh token</param>
            <returns>Returns the result of token revoke(true or false)</returns>
            <response code="200">All data has been successfully entered into the database</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="401">If the user is not authorized</response>
            <response code="422">If it was not possible to add a role to a user</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.GetTokenAsync(Application.Features.UserIdentityFeatures.Queries.Common.TokenRequestModel)">
            <summary>
            Get token
            </summary>
            <returns>Returns JWT Security token</returns>
            <response code="200">All database data retrieved successfully</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.GetRefreshTokenAsync">
            <summary>
            Get RefreshToken
            </summary>
            <returns>Returns JWT Security token and RefreshToken</returns>
            <response code="200">All database data retrieved successfully</response>
            <response code="400">If incorrect data is entered or retrieved</response>
            <response code="500">
            If it was not possible to get a list of elements from the database or anothers errors
            </response>
        </member>
        <member name="M:WebUI.Controllers.UserIdentityController.SetRefreshTokenInCookie(System.String)">
            <summary>
            Takes a refresh token as a parameter and stores it as a browser cookie
            </summary>
            <param name="refreshToken">RefreshToken</param>
        </member>
    </members>
</doc>
