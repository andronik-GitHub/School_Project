<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SchoolLibrary_EF.API</name>
    </assembly>
    <members>
        <member name="M:SchoolLibrary_EF.API.Controllers.AuthorController.GetAllAuthorsAsync(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all Authors
            </summary>
            <remarks>
            Sample request:
            GET ef/author?MinYearOfBirth=1990(amp)MaxYearOfBirth=2000(amp)PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of AuthorDTO</returns>
            <response code="200">Success</response>
            <response code="400">If invalid filtering data is entered</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.AuthorController.GetAuthorByIdAsync(System.Guid)">
            <summary>
            Gets the Author by id
            </summary>
            <remarks>
            Sample request:
            GET ef/author/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Author id (Guid)</param>
            <returns>Returns element of AuthorDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.AuthorController.AddAuthorAsync(SchoolLibrary_EF.BLL.DTO.AuthorDTO)">
            <summary>
            Creates new Author
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/author
                {
                    "authorid": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "firstName": "string",
                    "lastName": "string",
                    "birthdate": "2023-03-20T14:31:27.294Z",
                    "country": "string"
                }
            </remarks>
            <param name="newAuthor">AuthorDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.AuthorController.UpdateAuthorAsync(SchoolLibrary_EF.BLL.DTO.AuthorDTO)">
            <summary>
            Update the Author
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/author
                {
                    "authorid": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "firstName": "string",
                    "lastName": "string",
                    "birthdate": "2023-03-20T14:31:27.294Z",
                    "country": "string"
                }
            </remarks>
            <param name="updateAuthor">AuthorDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.AuthorController.DeleteAuthorAsync(System.Guid)">
            <summary>
            Delete the Author by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/author/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Author id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.AuthorController.GetAllAuthors_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all Authors
            </summary>
            <remarks>
            Sample request:
            GET ef/author/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(Author)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.AuthorController.GetAuthorById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the Author by id
            </summary>
            <remarks>
            Sample request:
            GET ef/author/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">Author id (Guid)</param>
            <param name="parameters">Author parameters for sort/paging/... (AuthorParameters)</param>
            <returns>Returns element of ExpandoObject(Author)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookAuthorsController.GetAllBookAuthorsAsync(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all BookAuthors
            </summary>
            <remarks>
            Sample request:
            GET ef/bookauthors?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of BookAuthorsDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookAuthorsController.GetBookAuthorsByIdAsync(System.Guid,System.Guid)">
            <summary>
            Gets the BookAuthors by id
            </summary>
            <remarks>
            Sample request:
            GET ef/bookauthors/68c64e3b-7bc4-4ce2-b9c4-005783abb248/27402968-975b-47f7-8586-0dffdf32b78d
            </remarks>
            <param name="bookId">BookAuthors BookId (Guid)</param>
            <param name="authorId">BookAuthors AuthorId (Guid)</param>
            <returns>Returns element of BookAuthorsDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookAuthorsController.AddBookAuthorsAsync(SchoolLibrary_EF.BLL.DTO.BookAuthorsDTO)">
            <summary>
            Creates new BookAuthors
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/bookauthors
                {
                    "bookTitle": "string",
                    "authorFullName": "string string"
                }
            </remarks>
            <param name="newBookAuthors">BookAuthorsDTO newEntity</param>
            <returns>Returns id (Guid, Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="409">If an existing object is adding</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookAuthorsController.UpdateBookAuthorsAsync(SchoolLibrary_EF.BLL.DTO.BookAuthorsDTO)">
            <summary>
            Update the BookAuthors
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/bookauthors
                {
                    "bookTitle": "string",
                    "authorFullName": "string string"
                }
            </remarks>
            <param name="updateBookAuthors">BookAuthorsDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookAuthorsController.DeleteBookAuthorsAsync(System.Guid,System.Guid)">
            <summary>
            Delete the BookAuthors by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/bookauthors/68c64e3b-7bc4-4ce2-b9c4-005783abb248/27402968-975b-47f7-8586-0dffdf32b78d
            </remarks>
            <param name="bookId">BookAuthors BookId (Guid)</param>
            <param name="authorId">BookAuthors AuthorId (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookController.GetAllBooksAsync(SchoolLibrary_EF.DAL.Paging.Entities.BookParameters)">
            <summary>
            Gets the list of all Books
            </summary>
            <remarks>
            Sample request:
            GET ef/book?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of BookDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookController.GetBookByIdAsync(System.Guid)">
            <summary>
            Gets the Book by id
            </summary>
            <remarks>
            Sample request:
            GET ef/book/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Book id (Guid)</param>
            <returns>Returns element of BookDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookController.AddBookAsync(SchoolLibrary_EF.BLL.DTO.BookDTO)">
            <summary>
            Creates new Book
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/book
                {
                    "bookId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "title": "string",
                    "publishingYear": 0,
                    "isbn": "string",
                    "publisherName": "string",
                    "publisherLocation": "string, string, string"
                }
            </remarks>
            <param name="newBook">BookDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookController.UpdateBookAsync(SchoolLibrary_EF.BLL.DTO.BookDTO)">
            <summary>
            Update the Book
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/book
                {
                    "bookId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "title": "string",
                    "publishingYear": 0,
                    "isbn": "string",
                    "publisherName": "string",
                    "publisherLocation": "string, string, string"
                }
            </remarks>
            <param name="updateBook">BookDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookController.DeleteBookAsync(System.Guid)">
            <summary>
            Delete the Book by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/book/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Book id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookController.GetAllBooks_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.BookParameters)">
            <summary>
            Gets the list of all Books
            </summary>
            <remarks>
            Sample request:
            GET ef/book/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(Book)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookController.GetBookById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.BookParameters)">
            <summary>
            Gets the Book by id
            </summary>
            <remarks>
            Sample request:
            GET ef/book/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">Book id (Guid)</param>
            <param name="parameters">Book parameters for sort/paging/... (BookParameters)</param>
            <returns>Returns element of ExpandoObject(Book)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookDetailsController.GetAllBookDetailsAsync(SchoolLibrary_EF.DAL.Paging.Entities.BookDetailsParameters)">
            <summary>
            Gets the list of all BookDetails
            </summary>
            <remarks>
            Sample request:
            GET ef/bookdetails?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of BookDetailsDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookDetailsController.GetBookDetailsByIdAsync(System.Guid)">
            <summary>
            Gets the BookDetails by id
            </summary>
            <remarks>
            Sample request:
            GET ef/bookdetails/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">BookDetails id (Guid)</param>
            <returns>Returns element of BookDetailsDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookDetailsController.AddBookDetailsAsync(SchoolLibrary_EF.BLL.DTO.BookDetailsDTO)">
            <summary>
            Creates new BookDetails
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/bookdetails
                {
                    "bookDetailId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "pages": 0,
                    "language": "string",
                    "format": "string",
                    "bookTitle": "string",
                    "bookPublishingYear": 0
                }
            </remarks>
            <param name="newBookDetails">BookDetailsDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookDetailsController.UpdateBookDetailsAsync(SchoolLibrary_EF.BLL.DTO.BookDetailsDTO)">
            <summary>
            Update the BookDetails
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/bookdetails
                {
                    "bookDetailId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "pages": 0,
                    "language": "string",
                    "format": "string",
                    "bookTitle": "string",
                    "bookPublishingYear": 0
                }
            </remarks>
            <param name="updateBookDetails">BookDetailsDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookDetailsController.DeleteBookDetailsAsync(System.Guid)">
            <summary>
            Delete the BookDetails by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/bookdetails/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">BookDetails id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookDetailsController.GetAllBookDetails_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.BookDetailsParameters)">
            <summary>
            Gets the list of all BookDetails
            </summary>
            <remarks>
            Sample request:
            GET ef/bookdetails/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(BookDetails)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookDetailsController.GetBookDetailsById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.BookDetailsParameters)">
            <summary>
            Gets the BookDetails by id
            </summary>
            <remarks>
            Sample request:
            GET ef/bookdetails/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">BookDetails id (Guid)</param>
            <param name="parameters">BookDetails parameters for sort/paging/... (BookDetailsParameters)</param>
            <returns>Returns element of ExpandoObject(BookDetails)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookGenresController.GetAllBookGenresAsync(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all BookGenres
            </summary>
            <remarks>
            Sample request:
            GET ef/bookgenres?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of BookGenresDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookGenresController.GetBookGenresByIdAsync(System.Guid,System.Guid)">
            <summary>
            Gets the BookGenres by id
            </summary>
            <remarks>
            Sample request:
            GET ef/bookgenres/68c64e3b-7bc4-4ce2-b9c4-005783abb248/27402968-975b-47f7-8586-0dffdf32b78d
            </remarks>
            <param name="bookId">BookGenres BookId (Guid)</param>
            <param name="genreId">BookGenres GenreId (Guid)</param>
            <returns>Returns element of BookGenresDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookGenresController.AddBookGenresAsync(SchoolLibrary_EF.BLL.DTO.BookGenresDTO)">
            <summary>
            Creates new BookGenres
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/bookgenres
                {
                    "bookTitle": "string",
                    "genreName": "string"
                }
            </remarks>
            <param name="newBookGenres">BookGenresDTO newEntity</param>
            <returns>Returns id (Guid, Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="409">If an existing object is adding</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookGenresController.UpdateBookGenresAsync(SchoolLibrary_EF.BLL.DTO.BookGenresDTO)">
            <summary>
            Update the BookGenres
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/bookgenres
                {
                    "bookTitle": "string",
                    "genreName": "string"
                }
            </remarks>
            <param name="updateBookGenres">BookGenresDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.BookGenresController.DeleteBookGenresAsync(System.Guid,System.Guid)">
            <summary>
            Delete the BookGenres by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/bookgenres/68c64e3b-7bc4-4ce2-b9c4-005783abb248/27402968-975b-47f7-8586-0dffdf32b78d
            </remarks>
            <param name="bookId">BookGenres BookId (Guid)</param>
            <param name="genreId">BookGenres GenreId (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.GenreController.GetAllGenresAsync(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all Genres
            </summary>
            <remarks>
            Sample request:
            GET ef/genre?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of GenreDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.GenreController.GetGenreByIdAsync(System.Guid)">
            <summary>
            Gets the Genre by id
            </summary>
            <remarks>
            Sample request:
            GET ef/genre/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Genre id (Guid)</param>
            <returns>Returns element of GenreDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.GenreController.AddGenreAsync(SchoolLibrary_EF.BLL.DTO.GenreDTO)">
            <summary>
            Creates new Genre
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/genre
                {
                    "genreId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "name": "string",
                    "author": "string",
                    "rating": 0
                }
            </remarks>
            <param name="newGenre">GenreDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.GenreController.UpdateGenreAsync(SchoolLibrary_EF.BLL.DTO.GenreDTO)">
            <summary>
            Update the Genre
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/genre
                {
                    "genreId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "name": "string",
                    "author": "string",
                    "rating": 0
                }
            </remarks>
            <param name="updateGenre">GenreDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.GenreController.DeleteGenreAsync(System.Guid)">
            <summary>
            Delete the Genre by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/genre/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Genre id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.GenreController.GetAllGenres_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.GenreParameters)">
            <summary>
            Gets the list of all Genres
            </summary>
            <remarks>
            Sample request:
            GET ef/genre/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(Genre)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.GenreController.GetGenreById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.GenreParameters)">
            <summary>
            Gets the Genre by id
            </summary>
            <remarks>
            Sample request:
            GET ef/genre/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">Genre id (Guid)</param>
            <param name="parameters">Genre parameters for sort/paging/... (GenreParameters)</param>
            <returns>Returns element of ExpandoObject(Genre)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.LoanController.GetAllLoansAsync(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all Loans
            </summary>
            <remarks>
            Sample request:
            GET ef/loan?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of LoanDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.LoanController.GetLoanByIdAsync(System.Guid)">
            <summary>
            Gets the Loan by id
            </summary>
            <remarks>
            Sample request:
            GET ef/loan/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Loan id (Guid)</param>
            <returns>Returns element of LoanDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.LoanController.AddLoanAsync(SchoolLibrary_EF.BLL.DTO.LoanDTO)">
            <summary>
            Creates new Loan
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/loan
                {
                    "loanId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "loanDate": "2023-03-21T07:55:11.461Z",
                    "returnDate": "2023-03-21T07:55:11.461Z",
                    "userFullName": "string",
                    "bookTitle": "string",
                    "bookISBN": "string"
                }
            </remarks>
            <param name="newLoan">LoanDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.LoanController.UpdateLoanAsync(SchoolLibrary_EF.BLL.DTO.LoanDTO)">
            <summary>
            Update the Loan
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/loan
                {
                    "loanId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "loanDate": "2023-03-21T07:55:11.461Z",
                    "returnDate": "2023-03-21T07:55:11.461Z",
                    "userFullName": "string",
                    "bookTitle": "string",
                    "bookISBN": "string"
                }
            </remarks>
            <param name="updateLoan">LoanDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.LoanController.DeleteLoanAsync(System.Guid)">
            <summary>
            Delete the Loan by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/loan/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Loan id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.LoanController.GetAllLoans_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.LoanParameters)">
            <summary>
            Gets the list of all Loans
            </summary>
            <remarks>
            Sample request:
            GET ef/loan/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(Loan)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.LoanController.GetLoanById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.LoanParameters)">
            <summary>
            Gets the Loan by id
            </summary>
            <remarks>
            Sample request:
            GET ef/loan/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">Loan id (Guid)</param>
            <param name="parameters">Loan parameters for sort/paging/... (LoanParameters)</param>
            <returns>Returns element of ExpandoObject(Loan)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.PublisherController.GetAllPublishersAsync(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all Publishers
            </summary>
            <remarks>
            Sample request:
            GET ef/publisher?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of PublisherDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.PublisherController.GetPublisherByIdAsync(System.Guid)">
            <summary>
            Gets the Publisher by id
            </summary>
            <remarks>
            Sample request:
            GET ef/publisher/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Publisher id (Guid)</param>
            <returns>Returns element of PublisherDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.PublisherController.AddPublisherAsync(SchoolLibrary_EF.BLL.DTO.PublisherDTO)">
            <summary>
            Creates new Publisher
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/publisher
                {
                    "publisherId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "name": "string",
                    "country": "string",
                    "city": "string",
                    "street": "string"
                }
            </remarks>
            <param name="newPublisher">PublisherDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.PublisherController.UpdatePublisherAsync(SchoolLibrary_EF.BLL.DTO.PublisherDTO)">
            <summary>
            Update the Publisher
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/publisher
                {
                    "authorid": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "firstName": "string",
                    "lastName": "string",
                    "birthdate": "2023-03-20T14:31:27.294Z",
                    "country": "string"
                }
            </remarks>
            <param name="updatePublisher">PublisherDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.PublisherController.DeletePublisherAsync(System.Guid)">
            <summary>
            Delete the Publisher by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/publisher/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Publisher id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.PublisherController.GetAllPublishers_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.PublisherParameters)">
            <summary>
            Gets the list of all Publishers
            </summary>
            <remarks>
            Sample request:
            GET ef/publisher/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(Publisher)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.PublisherController.GetPublisherById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.PublisherParameters)">
            <summary>
            Gets the Publisher by id
            </summary>
            <remarks>
            Sample request:
            GET ef/publisher/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">Publisher id (Guid)</param>
            <param name="parameters">Publisher parameters for sort/paging/... (PublisherParameters)</param>
            <returns>Returns element of ExpandoObject(Publisher)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.ReviewController.GetAllReviewsAsync(SchoolLibrary_EF.DAL.Paging.Entities.AuthorParameters)">
            <summary>
            Gets the list of all Reviews
            </summary>
            <remarks>
            Sample request:
            GET ef/review?PageNumber=5(amp)PageSize=10
            </remarks>
            <returns>Returns list of ReviewDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.ReviewController.GetReviewByIdAsync(System.Guid)">
            <summary>
            Gets the Review by id
            </summary>
            <remarks>
            Sample request:
            GET ef/review/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Review id (Guid)</param>
            <returns>Returns element of ReviewDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.ReviewController.AddReviewAsync(SchoolLibrary_EF.BLL.DTO.ReviewDTO)">
            <summary>
            Creates new Review
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/review
                {
                    "reviewId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "rating": 0,
                    "reviewText": "string",
                    "userFullName": "string",
                    "bookTitle": "string"
                }
            </remarks>
            <param name="newReview">ReviewDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.ReviewController.UpdateReviewAsync(SchoolLibrary_EF.BLL.DTO.ReviewDTO)">
            <summary>
            Update the Review
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/review
                {
                    "reviewId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "rating": 0,
                    "reviewText": "string",
                    "userFullName": "string",
                    "bookTitle": "string"
                }
            </remarks>
            <param name="updateReview">ReviewDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.ReviewController.DeleteReviewAsync(System.Guid)">
            <summary>
            Delete the Review by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/review/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">Review id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.ReviewController.GetAllReviews_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.ReviewParameters)">
            <summary>
            Gets the list of all Reviews
            </summary>
            <remarks>
            Sample request:
            GET ef/review/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(Review)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.ReviewController.GetReviewById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.ReviewParameters)">
            <summary>
            Gets the Review by id
            </summary>
            <remarks>
            Sample request:
            GET ef/review/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">Review id (Guid)</param>
            <param name="parameters">Review parameters for sort/paging/... (ReviewParameters)</param>
            <returns>Returns element of ExpandoObject(Review)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.GetAllUsersAsync(SchoolLibrary_EF.DAL.Paging.Entities.UserParameters)">
            <summary>
            Gets the list of all Users
            </summary>
            <remarks>
            Sample request:
            GET ef/user?UserName=Bob(amp)PageNumber=5(amp)PageSize=10
            </remarks>
            <param name="parameters">User parameters for sort/paging/... (UserParameters)</param>
            <returns>Returns list of UserDTO</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.GetUserByIdAsync(System.Guid)">
            <summary>
            Gets the User by id
            </summary>
            <remarks>
            Sample request:
            GET ef/user/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">User id (Guid)</param>
            <returns>Returns element of UserDTO</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.AddUserAsync(SchoolLibrary_EF.BLL.DTO.UserDTO)">
            <summary>
            Creates new User
            </summary>
            <remarks>
            Sample request:
            
                POST: ef/user
                {
                    "userId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "firstName": "string",
                    "lastName": "string",
                    "email": "string"
                }
            </remarks>
            <param name="newUser">UserDTO newEntity</param>
            <returns>Returns id (Guid)</returns>
            <response code="200">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.UpdateUserAsync(SchoolLibrary_EF.BLL.DTO.UserDTO)">
            <summary>
            Update the User
            </summary>
            <remarks>
            Sample request:
            
                PUT: ef/user
                {
                    "userId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                    "firstName": "string",
                    "lastName": "string",
                    "email": "string"
                }
            </remarks>
            <param name="updateUser">UserDTO updateEntity</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.DeleteUserAsync(System.Guid)">
            <summary>
            Delete the User by id
            </summary>
            <remarks>
            Sample request:
            DELETE: ef/user/13ce1333-7b7c-4395-8565-0474a6ad05ad
            </remarks>
            <param name="id">User id (Guid)</param>
            <returns>Returns NoContent</returns>
            <response code="204">Success</response>
            <response code="400">If invalid data entered</response>
            <response code="500">If it was not possible to adding element to the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.GetAllUsers_DataShaping_Async(SchoolLibrary_EF.DAL.Paging.Entities.UserParameters)">
            <summary>
            Gets the list of all Users
            </summary>
            <remarks>
            Sample request:
            GET ef/user/datashaping?Fields=UserId%2C%20FirstName%2C%20LastName%2C%20Password
            </remarks>
            <returns>Returns list of ExpandoObject(User)</returns>
            <response code="200">Success</response>
            <response code="500">If it was not possible to get a list of elements from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.GetUserById_DataShaping_Async(System.Guid,SchoolLibrary_EF.DAL.Paging.Entities.UserParameters)">
            <summary>
            Gets the User by id
            </summary>
            <remarks>
            Sample request:
            GET ef/user/datashaping/b12c5ca7-ab3f-4d0c-bc58-0512bbb30e69?Fields=UserId%2C%20FirstName%2C%20Email
            </remarks>
            <param name="id">User id (Guid)</param>
            <param name="parameters">User parameters for sort/paging/... (UserParameters)</param>
            <returns>Returns element of ExpandoObject(User)</returns>
            <response code="200">Success</response>
            <response code="404">If the element with such ID is not found in the database</response>
            <response code="500">If it was not possible to get element from the database</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.GetSecuredData">
            <summary>
            Get secured data
            </summary>
            <remarks>
            Sample request:
            GET https://localhost:5001/ef/User/secure%data
            </remarks>
            <returns>Returns secured data</returns>
            <response code="200">Success</response>
            <response code="401">If user not authentication</response>
        </member>
        <member name="M:SchoolLibrary_EF.API.Controllers.UserController.RegisterAsync(SchoolLibrary_EF.BLL.DTO.Identity.RegisterModel)">
            <summary>
            Registering new user
            </summary>
            <remarks>
            Sample request:
            
                POST https://localhost:5001/ef/User/register
                {
                    "FirstName": "John",
                    "LastName": "Snow",
                    "UserName": "John_Snow",
                    "Email": "john_snow@gmail.com",
                    "Password": "Pa$$w0rd"
                }
            </remarks>
            <param name="model">RegisterModel for creating new user</param>
            <returns>Returns a message about successful user registration</returns>
            <response code="200">Registration successful</response>
        </member>
        <member name="T:SchoolLibrary_EF.API.Migrations.FirstMigration">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.FirstMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.FirstMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.FirstMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SchoolLibrary_EF.API.Migrations.SeedingFakeData">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.SeedingFakeData.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.SeedingFakeData.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.SeedingFakeData.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:SchoolLibrary_EF.API.Migrations.CorrectUserAddressMigration">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.CorrectUserAddressMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.CorrectUserAddressMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:SchoolLibrary_EF.API.Migrations.CorrectUserAddressMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
